clear all
close all
%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\ESE\Documents\GitHub\mLab_PressureMat\YogaMatC++ -16x16\YogaMat\MatData.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2016/12/02 11:02:26

%% Initialize variables.
filename = 'C:\Users\ESE\Documents\GitHub\mLab_PressureMat\YogaMatC++ -16x16\YogaMat\MatData.txt';
delimiter = '\t';

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%*s%s%*s%s%*s%s%*s%s%*s%s%*s%s%*s%s%*s%s%*s%s%*s%s%*s%s%*s%s%*s%s%*s%s%*s%s%*s%s%*s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
N_Scan = cell2mat(raw(:, 1)); % Counter for each mat scan
x_Row = cell2mat(raw(:, 2));  % First Row (0) is not connected
% MUX1 
Amp0  = cell2mat(raw(:, 3));  % Column 1 is not connected
Amp1 = cell2mat(raw(:, 4));   % Column 2
Amp2 = cell2mat(raw(:, 5));   % Column 3
Amp3 = cell2mat(raw(:, 6));   % Column 4
% MUX2 
Amp4 = cell2mat(raw(:, 7));
Amp5 = cell2mat(raw(:, 8));
Amp6 = cell2mat(raw(:, 9));
Amp7 = cell2mat(raw(:, 10));
% MUX3 
Amp8 = cell2mat(raw(:, 11));
Amp9= cell2mat(raw(:, 12));
Amp10 = cell2mat(raw(:, 13));
Amp11 = cell2mat(raw(:, 14));
% MUX4 
Amp12 = cell2mat(raw(:, 15));
Amp13 = cell2mat(raw(:, 16));
Amp14 = cell2mat(raw(:, 17));
Amp15 = cell2mat(raw(:, 18));


%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me R;

%% Data analysis

split_num = length(Amp0)/16;
split_num_int = round(split_num)-1;
tau = (split_num - split_num_int)*16

Amp0Res = reshape(Amp0(1:end-tau), [split_num_int 16])';
Amp1Res = reshape(Amp1(1:end-tau), [split_num_int 16])';
Amp2Res = reshape(Amp2(1:end-tau), [split_num_int 16])';
Amp3Res = reshape(Amp3(1:end-tau), [split_num_int 16])';
Amp4Res = reshape(Amp4(1:end-tau), [split_num_int 16])';
Amp5Res = reshape(Amp5(1:end-tau), [split_num_int 16])';
Amp6Res = reshape(Amp6(1:end-tau), [split_num_int 16])';
Amp7Res = reshape(Amp7(1:end-tau), [split_num_int 16])';
Amp8Res = reshape(Amp8(1:end-tau), [split_num_int 16])';
Amp9Res = reshape(Amp9(1:end-tau), [split_num_int 16])';
Amp10Res = reshape(Amp10(1:end-tau), [split_num_int 16])';
Amp11Res = reshape(Amp11(1:end-tau), [split_num_int 16])';
Amp12Res = reshape(Amp12(1:end-tau), [split_num_int 16])';
Amp13Res = reshape(Amp13(1:end-tau), [split_num_int 16])';
Amp14Res = reshape(Amp14(1:end-tau), [split_num_int 16])';
Amp15Res = reshape(Amp15(1:end-tau), [split_num_int 16])';

idx = 180;
start =3;
on =1;
Matsurf = [Amp0Res(1:end,idx)-Amp0Res(1:end,start)*on Amp1Res(1:end,idx)-Amp1Res(1:end,start)*on Amp2Res(1:end,idx)-Amp2Res(1:end,start)*on Amp3Res(1:end,idx)-Amp3Res(1:end,start)*on Amp4Res(1:end,idx)-Amp4Res(1:end,start)*on ...
    Amp5Res(1:end,idx)-Amp5Res(1:end,start)*on Amp6Res(1:end,idx)-Amp6Res(1:end,start)*on Amp7Res(1:end,idx)-Amp7Res(1:end,start)*on Amp8Res(1:end,idx)-Amp8Res(1:end,start)*on Amp9Res(1:end,idx)-Amp9Res(1:end,start)*on...
    Amp10Res(1:end,idx)-Amp10Res(1:end,start)*on Amp11Res(1:end,idx)-Amp11Res(1:end,start)*on Amp12Res(1:end,idx)-Amp12Res(1:end,start)*on Amp13Res(1:end,idx)-Amp13Res(1:end,start)*on Amp14Res(1:end,idx)-Amp14Res(1:end,start)*on Amp15Res(1:end,idx)-Amp15Res(1:end,start)*on ]
surf(Matsurf)
lol;


